version: "3"
services:
  mysql:
    image: mysql:5.7.29
    ports:
      - "13306:3306"
    environment:
      - MYSQL_USER=root
      - MYSQL_ROOT_PASSWORD=root
      # - MYSQL_DATABASE=kg
      - LANG=C.UTF-8
      - TZ=Asia/Shanghai
    volumes:
      - ./data/mysql/data:/var/lib/mysql
      - ./data/mysql/log:/var/log/mysql
      - ./data/mysql/backup:/var/lib/mysql-files/
      - ./data/mysql/my.cnf:/etc/mysql/conf.d/mysql.cnf
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p${MYSQL_ROOT_PASSWORD} || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - xnet

  redis:
    image: redis:5.0-alpine
    ports:
      - "16379:6379"
    #environment:
    #  - ALLOW_EMPTY_PASSWORD=no
    #  - REDIS_PASSWORD=bblnXxa1
    #  - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    volumes:
      - ./data/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./data/redis/data:/data
    healthcheck:
      test: ["CMD-SHELL", "echo PING | nc -w 1 localhost 6379 | grep PONG"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - xnet

  arangodb:
    image: arangodb/arangodb:3.7.3
    environment:
    - ARANGO_ROOT_PASSWORD=datagrand
    ports:
    - "18529:8529"
    volumes:
    - "./data/arangodb:/var/lib/arangodb3"
    networks:
      - xnet

  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: server /data
    ports:
      - "19000:9000"
    volumes:
      - ./data/minio/data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - xnet

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - "11433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=xyLINN@0208
#    # 加了volumes会报错，不加会丢失数据，一般一次性的演示使用，可以考虑使用绝对路径
#    volumes:
#      - ./data/mssql/data:/var/opt/mssql
    networks:
      - xnet

  postgres:
    image: postgres:latest
    ports:
      - "15432:5432"
    environment:
      - POSTGRES_PASSWORD=123456
#    volumes:
#    # 注意文件中./data/postgres/data必须是空文件，不可以存储.gitkeep等其它文件
#      - ./data/postgres/data:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: any
    networks:
      - xnet

  elasticsearch:
    image: elasticsearch:5.5-alpine
    # image: blacktop/elasticsearch:7.5
    ports:
      - "19200:9200"
      - "19300:9300"
    environment:
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      # - node.name=elasticsearch
      # - http.host=0.0.0.0
      # - cluster.name=docker-cluster
      # - discovery.zen.minimum_master_nodes=1
      # - Dlog4j2.disable.jmx=true
      # - discovery.type=single-node
      # - bootstrap.memory_lock=true
      # - bootstrap.system_call_filter=false
      # - xpack.security.enabled=false
      # - xpack.monitoring.enabled=true
      # - xpack.graph.enabled=false
      #  - xpack.watcher.enabled=false
    volumes:
      - ./data/elasticsearch/config:/usr/share/elasticsearch/config
      - ./data/elasticsearch/data:/usr/share/elasticsearch/data
      - ./data/elasticsearch/logs:/usr/share/elasticsearch/logs
      - ./data/elasticsearch/plugins:/usr/share/elasticsearch/plugins
    healthcheck:
      test: ["CMD-SHELL", "echo -ne 'GET / HTTP/1.0\r\n\r\n' | nc localhost 9200 | head -1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - xnet

  kibana:
    image: kibana:5.5
    ports:
      - "15601:5601"
    volumes:
      - ./data/kibana/config/kibana.yml:/etc/kibana/kibana.yml
    depends_on:
      - elasticsearch
    networks:
      - xnet

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "12181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888
    volumes:
      - ./data/zookeeper/data:/opt/zookeeper-3.4.13/data
      - ./data/zookeeper/logs:/var/log
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - xnet

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LOG_DIRS: /opt/kafka_2.12-2.5.0/data
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka/config:/opt/kafka_2.12-2.5.0/config
      - ./data/kafka/data:/opt/kafka_2.12-2.5.0/data
      - ./data/kafka/logs:/opt/kafka_2.12-2.5.0/logs
    healthcheck:
      test: ["CMD-SHELL", "unset JMX_PORT; kafka-topics.sh --zookeeper zookeeper:2181 --list"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - zookeeper
    networks:
      - xnet

  portainer:
    image: portainer
    ports:
      - "9999:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - xnet

networks:
  xnet:
    external: true
